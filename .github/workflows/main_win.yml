name: Actions Windows ðŸ˜Ž

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: StandaloneWindows64

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-Windows
          path: build

  send_to_ftp:
    name: Send to FTP
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: build-Windows
          path: build

      - name: Create directory for zip
        run: mkdir files

      - name: Compress build
        run: |
          zip -r files/mkoc.zip build
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        id: upload_release_asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./files/mkoc.zip
          asset_name: mkoc.zip
          asset_content_type: application/zip
      - name: Get download URL
        run: echo "The download URL is ${{ steps.upload_release_asset.outputs.browser_download_url }}"

  update_the_downloads:
    runs-on: ubuntu-latest
    needs: send_to_ftp
    name: Update the downloads in server
    steps:
      - name: Send a POST request
        run: |
          response=$(curl -X POST -H "Content-Type: application/json" -d '{"comment": "${{ steps.last_commit.outputs.message }}", "data": {"key":"${{ secrets.DOWNLOAD_UPDATE_JSON }}"}}' ${{ secrets.DOWNLOAD_UPDATE_URL }})
          echo "Response code: $response"
