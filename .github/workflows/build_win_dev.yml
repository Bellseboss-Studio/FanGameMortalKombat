name: Actions Windows Dev ðŸ˜Ž

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - develop
      
jobs:
  build:
    name: Build Project Dev
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true
          
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library

      - name: Clean up
        uses: jlumbroso/free-disk-space@v1.2.0

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: StandaloneWindows64

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-Windows
          path: build

  create_release_and_upload:
    name: Create Release and Upload Artifact
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build-Windows
          path: build

      - name: Create directory for zip
        run: mkdir files

      - name: Compress build
        run: zip -r files/build-Windows.zip build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./files/build-Windows.zip
          asset_name: build-Windows.zip
          asset_content_type: application/zip

      - name: Set download URL
        id: set_download_url
        run: echo "DOWNLOAD_URL=${{ steps.upload_release_asset.outputs.browser_download_url }}" >> $GITHUB_ENV

      - name: Send Discord Notification
        run: |
          json_payload=$(jq -n \
                        --arg content "New build available: $DOWNLOAD_URL" \
                        '{content: $content}')
          echo "JSON being sent: $json_payload"
          curl -X POST -H "Content-Type: application/json" -d "$json_payload" ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          DOWNLOAD_URL: ${{ steps.upload_release_asset.outputs.browser_download_url }}